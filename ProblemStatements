24th Oct-8 A.M-11 A.M
1. Selection of MPCS exams include a fitness test which is conducted on ground. There will be a batch of 3 trainees, appearing for a running test on track for 3 rounds. You need to record their oxygen level after every round. After trainees are finished with all rounds, calculate for each trainee his average oxygen level over the 3 rounds and select the one with the highest average oxygen level as the most fit trainee. If more than one trainee attains the same highest average level, they all need to be selected. Display the most fit trainee (or trainers) and the highest average oxygen level.
Note:
1. The oxygen value entered should not be accepted if it is not in the range between 1 and 100. 
2. If the calculated maximum average oxygen value of the trainee is below 70 then declare the trainees as unfit with meaningful message as “All trainees are unfit”.
3. Average oxygen values should be rounded
Example 1:
INPUT values
95
92
95
92
90
92
90
92
90
OUTPUT values
Trainee Number: 1
Trainee Number: 3
Note: Input should be 9 integer values representing oxygen levels entered in order as 
Round 1:
Oxygen value of trainee 1
Oxygen value of trainee 2
Oxygen value of trainee 3
Round 2:
Oxygen value of trainee 1
Oxygen value of trainee 2
Oxygen value of trainee 3

Round 3:
Oxygen value of trainee 1
Oxygen value of trainee 2
Oxygen value of trainee 3
Oxygen must be in given format as in above example. For any wrong input final output should display “INVALID INPUT”

2. There is jar full of candies for sale at a mall counter. Jar has the capacity N, which means the jar can contain maximum N candies when jar is full. At any point of time, jar can have M number of candies where M<=N. Candies are served to the customers. Jar is never remaining empty as when last K candidates are left, jar is refilled with new candidates in such a way that jar gets full.
Write the code to implement above scenario. Display jar at counter with available number of candies.
Input should be number of candies one customer orders at point of time. Update the jar after every purchase and display jar at counter. Output should give number of candies sold and updated number of candies in jar. If input is more than number of candies in jar, return “INVALID INPUT”. Given,
N=10, where N is number of candies available, K<=5, Where K is number of minimum candies that must be inside jar ever.
Example1: (N=10, K=<5)
Input value
3
Output values:
Number of candies sold: 3
Number of candies available: 7





24th Oct 1 PM to 4 PM
1. Washing Machine
A Washing Machine works on the principle of a Fuzzy system, the weight of clothes put inside it for wash is uncertain. But based on weight measured by sensors, it decides time and water levels which can be changed by menus given on the machine control area. For low water level, time estimate is 25 minutes, where approximate weight is 2000 grams or any non-zero positive number below that.
For medium water level, time estimated is 35 minutes, where approximate weight is between 2001 grams and 4000 grams. For High water level, time estimated is 45 minutes, where approximate weight is above 4000 grams.
Assume the capacity of the machine is maximum 7000 grams.
Where the approximate weight is zero, the estimate is 0 minutes. Write a function which takes numeric weight in the range [0, 7000] as input and produces estimated time as output; if input is more than 7000, then output is; “OVERLOADED!”, and for all other inputs, the output statement is “INVALID INPUT”.

Input should be in the form of integer value-
<Integer>
Output must have the following format-
Time Estimated: <Integer> Minutes
Example 1
Input value
2000
Output value
Time Estimated: 25 Minutes

2. Caesar Cipher
The Caesar cipher is a type of substitution cipher in which each alphabet in the plaintext or message is shifted by a number of places down the alphabet.
For example, with a shift of 1, P would be replaced by Q, Q would become R, and so on.
To pass an encrypted message from one person to another, it is first necessary that both parties have the ‘key’ for the cipher, so that the sender may encrypt it and the receiver may decrypt it.
The key is the number of OFFSETs to shift the cipher alphabet. Key can have basic shifts from 1to 25 positions as there are 26 total alphabets.
As we are designing custom Caesar cipher, in addition to alphabets, we are considering numeric digits from 0 to 9. Digits can also be shifted by key places.
For example, if given plain text contains any digit with value 5 and key=2, then 5 will be replaced by 7. “-“ (Minus sign) will remain as it is. Key value less than 0 should result into “INVALID INPUT”
Example 1:
Input:
Enter your Plain Text: All the Best
Enter the Key: 1

Output:
The encrypted Text is: Bmm uif Cftu
Write a function customCaesarCipher(int key, String message) which will accept plaintext and key as input parameters and returns its cipher text as output.
